 m = 8
 n = 4

 p = {2,4,5,6}
 w = {1,2,4,5}

        0   1   2   3   4   5   6   7   8
 p  w   0   0   0   0   0   0   0   0   0
 2  1   0   2   2   2   2   2   2   2   2
 4  2   0   2   4   6   6   6   6   6   6
 5  4   0   2   4   4   5   7   9   11  11
 6  5   0   2   4   4   5   7   9   11  11

Formule : 
V[i,w] = max { V[i-1,w], V[i-1,w-w[i]] + p[i] }

Application formule avec ligne 4 du tableau (V) :
V[4,1] = max { V[3,1], V[3, 1-5] + 6} -> on prend toujours la valeur maximale
V[4,2] = max { V[3,2], V[3, 2-5] + 6}
V[4,3] = max { V[3,3], V[3, 3-5] + 6}
V[4,4] = max { V[3,4], V[3, 4-5] + 6}
V[4,5] = max { V[3,5], V[3, 5-5] + 6}
V[4,6] = max { V[3,6], V[3, 6-5] + 6}
V[4,7] = max { V[3,7], V[3, 7-5] + 6}
V[4,8] = max { V[3,8], V[3, 8-5] + 6}
                11            10
=============================================================================

Function knapsack : 
    - params : 
        - W(capacité du sack) = 500€ investissement
        - wt(le prix des actions) = [tableau avec les prix]
        - val(le profit des actions) = [tableau avec les profits]
        - n(nombre d'actions) = len(actions)

1. Créer la matrice vide
    K = [[0 for x in range(max_invest + 1)] for x in range(nombre_items + 1)]

    K = représentation suivante : 

            0   1   2   3   4   5   6   7   8   9   10  ... 500 <-- la capacité de mon sac => max_invest
    val wt
    12% 5€
    2%  8€
    13% 10€
    ...
    10% 100€

    Important : la matrice est vide à ce moment. 

2. On remplit la matrice en utilisant le fonctionnement de l'ago knapsack
    a. Appliquer la formule pour compléter la matrice : K[i,w] = max { K[i-1,w], K[i-1,w-w[i]] + val[i] }

    Pour chaque i dans le range(n + 1):
        Pour chaque w dans le range(W + 1):
            Si i == 0 ou w == 0:
                Alors K[i][w] = 0 --> si la matrice 0 x 0 alors la valeur = 0
            sinon si 